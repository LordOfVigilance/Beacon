#version 430 core

layout (vertices = 4) out;

uniform mat4 mvp;

in VS_OUT {
	vec2 textureCoord;
	vec2 foamTextureCoord;
	vec2 foamTextureCoord2;
} tcsIn[];

out TCS_OUT {
	vec2 textureCoord;
	vec2 foamTextureCoord;
	vec2 foamTextureCoord2;
} tcsOut[];

void main(void) {
	if(gl_InvocationID == 0) {
		vec4 p0 = mvp * gl_in[0].gl_Position;
		vec4 p1 = mvp * gl_in[1].gl_Position;
		vec4 p2 = mvp * gl_in[2].gl_Position;
		vec4 p3 = mvp * gl_in[3].gl_Position;
		p0 /= p0.w;
		p1 /= p1.w;
		p2 /= p2.w;
		p3 /= p3.w;

		float l0 = length(p2.xy - p0.xy)*64.0 + 1.0;
		float l1 = length(p3.xy - p2.xy)*64.0 + 1.0;
		float l2 = length(p3.xy - p1.xy)*64.0 + 1.0;
		float l3 = length(p1.xy - p0.xy)*64.0 + 1.0;
			
		gl_TessLevelOuter[0] = l0;
		gl_TessLevelOuter[1] = l1;
		gl_TessLevelOuter[2] = l2;
		gl_TessLevelOuter[3] = l3;
		gl_TessLevelInner[0] = min(l1, l3);
		gl_TessLevelInner[1] = min(l0, l2);
	}
	gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
	tcsOut[gl_InvocationID].textureCoord = tcsIn[gl_InvocationID].textureCoord;
	tcsOut[gl_InvocationID].foamTextureCoord = tcsIn[gl_InvocationID].foamTextureCoord;
	tcsOut[gl_InvocationID].foamTextureCoord2 = tcsIn[gl_InvocationID].foamTextureCoord2;
}